// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/go-utils/debugutils (interfaces: PodFinder,LogCollector,ResourceCollector,StorageClient)

// Package debugutils is a generated GoMock package.
package debugutils

import (
	gomock "github.com/golang/mock/gomock"
	kuberesource "github.com/solo-io/go-utils/installutils/kuberesource"
	v1 "k8s.io/api/core/v1"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	reflect "reflect"
)

// MockPodFinder is a mock of PodFinder interface
type MockPodFinder struct {
	ctrl     *gomock.Controller
	recorder *MockPodFinderMockRecorder
}

// MockPodFinderMockRecorder is the mock recorder for MockPodFinder
type MockPodFinderMockRecorder struct {
	mock *MockPodFinder
}

// NewMockPodFinder creates a new mock instance
func NewMockPodFinder(ctrl *gomock.Controller) *MockPodFinder {
	mock := &MockPodFinder{ctrl: ctrl}
	mock.recorder = &MockPodFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPodFinder) EXPECT() *MockPodFinderMockRecorder {
	return m.recorder
}

// GetPods mocks base method
func (m *MockPodFinder) GetPods(arg0 kuberesource.UnstructuredResources) ([]*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPods", arg0)
	ret0, _ := ret[0].([]*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPods indicates an expected call of GetPods
func (mr *MockPodFinderMockRecorder) GetPods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPods", reflect.TypeOf((*MockPodFinder)(nil).GetPods), arg0)
}

// MockLogCollector is a mock of LogCollector interface
type MockLogCollector struct {
	ctrl     *gomock.Controller
	recorder *MockLogCollectorMockRecorder
}

// MockLogCollectorMockRecorder is the mock recorder for MockLogCollector
type MockLogCollectorMockRecorder struct {
	mock *MockLogCollector
}

// NewMockLogCollector creates a new mock instance
func NewMockLogCollector(ctrl *gomock.Controller) *MockLogCollector {
	mock := &MockLogCollector{ctrl: ctrl}
	mock.recorder = &MockLogCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogCollector) EXPECT() *MockLogCollectorMockRecorder {
	return m.recorder
}

// GetLogRequests mocks base method
func (m *MockLogCollector) GetLogRequests(arg0 kuberesource.UnstructuredResources) ([]*LogsRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogRequests", arg0)
	ret0, _ := ret[0].([]*LogsRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogRequests indicates an expected call of GetLogRequests
func (mr *MockLogCollectorMockRecorder) GetLogRequests(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogRequests", reflect.TypeOf((*MockLogCollector)(nil).GetLogRequests), arg0)
}

// SaveLogs mocks base method
func (m *MockLogCollector) SaveLogs(arg0 StorageClient, arg1 string, arg2 []*LogsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLogs indicates an expected call of SaveLogs
func (mr *MockLogCollectorMockRecorder) SaveLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogs", reflect.TypeOf((*MockLogCollector)(nil).SaveLogs), arg0, arg1, arg2)
}

// MockResourceCollector is a mock of ResourceCollector interface
type MockResourceCollector struct {
	ctrl     *gomock.Controller
	recorder *MockResourceCollectorMockRecorder
}

// MockResourceCollectorMockRecorder is the mock recorder for MockResourceCollector
type MockResourceCollectorMockRecorder struct {
	mock *MockResourceCollector
}

// NewMockResourceCollector creates a new mock instance
func NewMockResourceCollector(ctrl *gomock.Controller) *MockResourceCollector {
	mock := &MockResourceCollector{ctrl: ctrl}
	mock.recorder = &MockResourceCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResourceCollector) EXPECT() *MockResourceCollectorMockRecorder {
	return m.recorder
}

// RetrieveResources mocks base method
func (m *MockResourceCollector) RetrieveResources(arg0 kuberesource.UnstructuredResources, arg1 string, arg2 v10.ListOptions) ([]kuberesource.VersionedResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveResources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]kuberesource.VersionedResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveResources indicates an expected call of RetrieveResources
func (mr *MockResourceCollectorMockRecorder) RetrieveResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveResources", reflect.TypeOf((*MockResourceCollector)(nil).RetrieveResources), arg0, arg1, arg2)
}

// SaveResources mocks base method
func (m *MockResourceCollector) SaveResources(arg0 StorageClient, arg1 string, arg2 []kuberesource.VersionedResources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveResources indicates an expected call of SaveResources
func (mr *MockResourceCollectorMockRecorder) SaveResources(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveResources", reflect.TypeOf((*MockResourceCollector)(nil).SaveResources), arg0, arg1, arg2)
}

// MockStorageClient is a mock of StorageClient interface
type MockStorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockStorageClientMockRecorder
}

// MockStorageClientMockRecorder is the mock recorder for MockStorageClient
type MockStorageClientMockRecorder struct {
	mock *MockStorageClient
}

// NewMockStorageClient creates a new mock instance
func NewMockStorageClient(ctrl *gomock.Controller) *MockStorageClient {
	mock := &MockStorageClient{ctrl: ctrl}
	mock.recorder = &MockStorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageClient) EXPECT() *MockStorageClientMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStorageClient) Save(arg0 string, arg1 ...*StorageObject) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStorageClientMockRecorder) Save(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorageClient)(nil).Save), varargs...)
}
