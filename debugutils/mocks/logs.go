// Code generated by MockGen. DO NOT EDIT.
// Source: logs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	debugutils "github.com/solo-io/go-utils/debugutils"
	kuberesource "github.com/solo-io/go-utils/installutils/kuberesource"
	reflect "reflect"
)

// MockLogCollector is a mock of LogCollector interface
type MockLogCollector struct {
	ctrl     *gomock.Controller
	recorder *MockLogCollectorMockRecorder
}

// MockLogCollectorMockRecorder is the mock recorder for MockLogCollector
type MockLogCollectorMockRecorder struct {
	mock *MockLogCollector
}

// NewMockLogCollector creates a new mock instance
func NewMockLogCollector(ctrl *gomock.Controller) *MockLogCollector {
	mock := &MockLogCollector{ctrl: ctrl}
	mock.recorder = &MockLogCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogCollector) EXPECT() *MockLogCollectorMockRecorder {
	return m.recorder
}

// GetLogRequests mocks base method
func (m *MockLogCollector) GetLogRequests(resources kuberesource.UnstructuredResources) ([]*debugutils.LogsRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogRequests", resources)
	ret0, _ := ret[0].([]*debugutils.LogsRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogRequests indicates an expected call of GetLogRequests
func (mr *MockLogCollectorMockRecorder) GetLogRequests(resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogRequests", reflect.TypeOf((*MockLogCollector)(nil).GetLogRequests), resources)
}

// SaveLogs mocks base method
func (m *MockLogCollector) SaveLogs(client debugutils.StorageClient, location string, requests []*debugutils.LogsRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLogs", client, location, requests)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLogs indicates an expected call of SaveLogs
func (mr *MockLogCollectorMockRecorder) SaveLogs(client, location, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLogs", reflect.TypeOf((*MockLogCollector)(nil).SaveLogs), client, location, requests)
}
