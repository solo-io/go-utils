// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_helminstall is a generated GoMock package.
package mock_helminstall

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helminstall "github.com/solo-io/go-utils/installutils/helminstall"
	chart "helm.sh/helm/v3/pkg/chart"
	cli "helm.sh/helm/v3/pkg/cli"
	release "helm.sh/helm/v3/pkg/release"
)

// MockHelmClient is a mock of HelmClient interface
type MockHelmClient struct {
	ctrl     *gomock.Controller
	recorder *MockHelmClientMockRecorder
}

// MockHelmClientMockRecorder is the mock recorder for MockHelmClient
type MockHelmClientMockRecorder struct {
	mock *MockHelmClient
}

// NewMockHelmClient creates a new mock instance
func NewMockHelmClient(ctrl *gomock.Controller) *MockHelmClient {
	mock := &MockHelmClient{ctrl: ctrl}
	mock.recorder = &MockHelmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmClient) EXPECT() *MockHelmClientMockRecorder {
	return m.recorder
}

// NewInstall mocks base method
func (m *MockHelmClient) NewInstall(namespace, releaseName string, dryRun bool) (helminstall.HelmInstall, *cli.EnvSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewInstall", namespace, releaseName, dryRun)
	ret0, _ := ret[0].(helminstall.HelmInstall)
	ret1, _ := ret[1].(*cli.EnvSettings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewInstall indicates an expected call of NewInstall
func (mr *MockHelmClientMockRecorder) NewInstall(namespace, releaseName, dryRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewInstall", reflect.TypeOf((*MockHelmClient)(nil).NewInstall), namespace, releaseName, dryRun)
}

// NewUninstall mocks base method
func (m *MockHelmClient) NewUninstall(namespace string) (helminstall.HelmUninstall, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUninstall", namespace)
	ret0, _ := ret[0].(helminstall.HelmUninstall)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUninstall indicates an expected call of NewUninstall
func (mr *MockHelmClientMockRecorder) NewUninstall(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUninstall", reflect.TypeOf((*MockHelmClient)(nil).NewUninstall), namespace)
}

// ReleaseList mocks base method
func (m *MockHelmClient) ReleaseList(namespace string) (helminstall.HelmReleaseListRunner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseList", namespace)
	ret0, _ := ret[0].(helminstall.HelmReleaseListRunner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseList indicates an expected call of ReleaseList
func (mr *MockHelmClientMockRecorder) ReleaseList(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseList", reflect.TypeOf((*MockHelmClient)(nil).ReleaseList), namespace)
}

// DownloadChart mocks base method
func (m *MockHelmClient) DownloadChart(chartArchiveUri string) (*chart.Chart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadChart", chartArchiveUri)
	ret0, _ := ret[0].(*chart.Chart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadChart indicates an expected call of DownloadChart
func (mr *MockHelmClientMockRecorder) DownloadChart(chartArchiveUri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadChart", reflect.TypeOf((*MockHelmClient)(nil).DownloadChart), chartArchiveUri)
}

// ReleaseExists mocks base method
func (m *MockHelmClient) ReleaseExists(namespace, releaseName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseExists", namespace, releaseName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReleaseExists indicates an expected call of ReleaseExists
func (mr *MockHelmClientMockRecorder) ReleaseExists(namespace, releaseName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseExists", reflect.TypeOf((*MockHelmClient)(nil).ReleaseExists), namespace, releaseName)
}

// MockHelmInstall is a mock of HelmInstall interface
type MockHelmInstall struct {
	ctrl     *gomock.Controller
	recorder *MockHelmInstallMockRecorder
}

// MockHelmInstallMockRecorder is the mock recorder for MockHelmInstall
type MockHelmInstallMockRecorder struct {
	mock *MockHelmInstall
}

// NewMockHelmInstall creates a new mock instance
func NewMockHelmInstall(ctrl *gomock.Controller) *MockHelmInstall {
	mock := &MockHelmInstall{ctrl: ctrl}
	mock.recorder = &MockHelmInstallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmInstall) EXPECT() *MockHelmInstallMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHelmInstall) Run(chrt *chart.Chart, vals map[string]interface{}) (*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", chrt, vals)
	ret0, _ := ret[0].(*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockHelmInstallMockRecorder) Run(chrt, vals interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmInstall)(nil).Run), chrt, vals)
}

// MockHelmUninstall is a mock of HelmUninstall interface
type MockHelmUninstall struct {
	ctrl     *gomock.Controller
	recorder *MockHelmUninstallMockRecorder
}

// MockHelmUninstallMockRecorder is the mock recorder for MockHelmUninstall
type MockHelmUninstallMockRecorder struct {
	mock *MockHelmUninstall
}

// NewMockHelmUninstall creates a new mock instance
func NewMockHelmUninstall(ctrl *gomock.Controller) *MockHelmUninstall {
	mock := &MockHelmUninstall{ctrl: ctrl}
	mock.recorder = &MockHelmUninstallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmUninstall) EXPECT() *MockHelmUninstallMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHelmUninstall) Run(name string) (*release.UninstallReleaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", name)
	ret0, _ := ret[0].(*release.UninstallReleaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockHelmUninstallMockRecorder) Run(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmUninstall)(nil).Run), name)
}

// MockHelmReleaseListRunner is a mock of HelmReleaseListRunner interface
type MockHelmReleaseListRunner struct {
	ctrl     *gomock.Controller
	recorder *MockHelmReleaseListRunnerMockRecorder
}

// MockHelmReleaseListRunnerMockRecorder is the mock recorder for MockHelmReleaseListRunner
type MockHelmReleaseListRunnerMockRecorder struct {
	mock *MockHelmReleaseListRunner
}

// NewMockHelmReleaseListRunner creates a new mock instance
func NewMockHelmReleaseListRunner(ctrl *gomock.Controller) *MockHelmReleaseListRunner {
	mock := &MockHelmReleaseListRunner{ctrl: ctrl}
	mock.recorder = &MockHelmReleaseListRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHelmReleaseListRunner) EXPECT() *MockHelmReleaseListRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockHelmReleaseListRunner) Run() ([]*release.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].([]*release.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockHelmReleaseListRunnerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockHelmReleaseListRunner)(nil).Run))
}

// SetFilter mocks base method
func (m *MockHelmReleaseListRunner) SetFilter(filter string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFilter", filter)
}

// SetFilter indicates an expected call of SetFilter
func (mr *MockHelmReleaseListRunnerMockRecorder) SetFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFilter", reflect.TypeOf((*MockHelmReleaseListRunner)(nil).SetFilter), filter)
}
