// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/solo-io/go-utils/githubutils (interfaces: RepoClient)

// Package changelogutils_test is a generated GoMock package.
package changelogutils_test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/github"
	githubutils "github.com/solo-io/go-utils/githubutils"
)

// MockRepoClient is a mock of RepoClient interface
type MockRepoClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepoClientMockRecorder
}

// MockRepoClientMockRecorder is the mock recorder for MockRepoClient
type MockRepoClientMockRecorder struct {
	mock *MockRepoClient
}

// NewMockRepoClient creates a new mock instance
func NewMockRepoClient(ctrl *gomock.Controller) *MockRepoClient {
	mock := &MockRepoClient{ctrl: ctrl}
	mock.recorder = &MockRepoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoClient) EXPECT() *MockRepoClientMockRecorder {
	return m.recorder
}

// CompareCommits mocks base method
func (m *MockRepoClient) CompareCommits(arg0 context.Context, arg1, arg2 string) (*github.CommitsComparison, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.CommitsComparison)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareCommits indicates an expected call of CompareCommits
func (mr *MockRepoClientMockRecorder) CompareCommits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareCommits", reflect.TypeOf((*MockRepoClient)(nil).CompareCommits), arg0, arg1, arg2)
}

// CreateBranch mocks base method
func (m *MockRepoClient) CreateBranch(arg0 context.Context, arg1 string) (*github.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0, arg1)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch
func (mr *MockRepoClientMockRecorder) CreateBranch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockRepoClient)(nil).CreateBranch), arg0, arg1)
}

// CreatePR mocks base method
func (m *MockRepoClient) CreatePR(arg0 context.Context, arg1 string, arg2 githubutils.PRSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePR", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePR indicates an expected call of CreatePR
func (mr *MockRepoClientMockRecorder) CreatePR(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePR", reflect.TypeOf((*MockRepoClient)(nil).CreatePR), arg0, arg1, arg2)
}

// DirectoryExists mocks base method
func (m *MockRepoClient) DirectoryExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectoryExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirectoryExists indicates an expected call of DirectoryExists
func (mr *MockRepoClientMockRecorder) DirectoryExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryExists", reflect.TypeOf((*MockRepoClient)(nil).DirectoryExists), arg0, arg1, arg2)
}

// FileExists mocks base method
func (m *MockRepoClient) FileExists(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileExists indicates an expected call of FileExists
func (mr *MockRepoClientMockRecorder) FileExists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExists", reflect.TypeOf((*MockRepoClient)(nil).FileExists), arg0, arg1, arg2)
}

// FindLatestReleaseTagIncudingPrerelease mocks base method
func (m *MockRepoClient) FindLatestReleaseTagIncudingPrerelease(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLatestReleaseTagIncudingPrerelease", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLatestReleaseTagIncudingPrerelease indicates an expected call of FindLatestReleaseTagIncudingPrerelease
func (mr *MockRepoClientMockRecorder) FindLatestReleaseTagIncudingPrerelease(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLatestReleaseTagIncudingPrerelease", reflect.TypeOf((*MockRepoClient)(nil).FindLatestReleaseTagIncudingPrerelease), arg0)
}

// GetPR mocks base method
func (m *MockRepoClient) GetPR(arg0 context.Context, arg1 int) (*github.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPR", arg0, arg1)
	ret0, _ := ret[0].(*github.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPR indicates an expected call of GetPR
func (mr *MockRepoClientMockRecorder) GetPR(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPR", reflect.TypeOf((*MockRepoClient)(nil).GetPR), arg0, arg1)
}

// GetShaForTag mocks base method
func (m *MockRepoClient) GetShaForTag(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShaForTag", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShaForTag indicates an expected call of GetShaForTag
func (mr *MockRepoClientMockRecorder) GetShaForTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShaForTag", reflect.TypeOf((*MockRepoClient)(nil).GetShaForTag), arg0, arg1)
}

// UpdateRelease mocks base method
func (m *MockRepoClient) UpdateRelease(arg0 context.Context, arg1 *github.RepositoryRelease) (*github.RepositoryRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRelease", arg0, arg1)
	ret0, _ := ret[0].(*github.RepositoryRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRelease indicates an expected call of UpdateRelease
func (mr *MockRepoClientMockRecorder) UpdateRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRelease", reflect.TypeOf((*MockRepoClient)(nil).UpdateRelease), arg0, arg1)
}
