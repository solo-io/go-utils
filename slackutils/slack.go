package slackutils

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"

	"github.com/solo-io/go-utils/contextutils"
	"go.uber.org/zap"
)

var _ SlackClient = new(slackClient)

type SlackClient interface {
	Notify(ctx context.Context, url, message string)
}

func NewSlackClient() *slackClient {
	return &slackClient{}
}

type slackClient struct{}

func (s *slackClient) Notify(ctx context.Context, slackUrl, message string) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	if slackUrl == "" {
		return
	}

	type Payload struct {
		Text string `json:"text"`
	}

	data := Payload{
		Text: message,
	}
	payloadBytes, err := json.Marshal(data)
	if err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Notifying slack failed", zap.Error(err))
		return
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.Post(slackUrl, "application/json", body)
	defer req.Body.Close()
	if err != nil {
		contextutils.LoggerFrom(ctx).Errorw("Notifying slack failed", zap.Error(err))
		return
	}
}
