package hashutils

import (
	"encoding/binary"
	"hash"
	"hash/fnv"

	"github.com/mitchellh/hashstructure"
)

// Hashers are resources which have a custom hashing function defined.
// Hash functions are generated by default for go-utils resources
// Deprecated, use safe Hasher
type Hasher interface {
	Hash() uint64
}

// hash one or more values
// order matters
func HashAll(values ...interface{}) uint64 {
	var hashes []uint64
	for _, v := range values {
		hashes = append(hashes, hashValue(v))
	}
	return hashValue(hashes)
}

func hashValue(val interface{}) uint64 {
	if hasher, ok := val.(Hasher); ok {
		return hasher.Hash()
	}
	h, err := hashstructure.Hash(val, nil)
	if err != nil {
		panic("resource failed to hash: " + err.Error())
	}
	return h
}

type SafeHasher interface {
	Hash(hasher hash.Hash64) (uint64, error)
}

// hash one or more values
// order matters
func HashAllSafe(hasher hash.Hash64, values ...interface{}) (uint64, error) {
	if hasher == nil {
		hasher = fnv.New64()
	}
	var hashes []uint64
	for _, v := range values {
		hashVal, err := hashValueSafe(v)
		if err != nil {
			return 0, nil
		}
		hashes = append(hashes, hashVal)
	}
	for _, v := range hashes {
		if err := binary.Write(hasher, binary.LittleEndian, v); err != nil {
			return 0, err
		}
	}
	return hasher.Sum64(), nil
}

func hashValueSafe(val interface{}) (uint64, error) {
	if hasher, ok := val.(SafeHasher); ok {
		return hasher.Hash(nil)
	}
	h, err := hashstructure.Hash(val, nil)
	if err != nil {
		return 0, err
	}
	return h, nil
}
